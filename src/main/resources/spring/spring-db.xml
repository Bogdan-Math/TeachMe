<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/jdbc
                           http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx.xsd"
>

    <!--import properties from PostgreSQL.properties-->
<!--
    <context:property-placeholder location="classpath:db/postgres/postgreSQL.properties"/>
-->
    <context:property-placeholder location="classpath:db/hsqldb/HSQLDB.properties"/>

    <!--populate db in every spring-context-->
    <jdbc:initialize-database data-source="jdbcDataSource" enabled="${db.init}">
<!--
        <jdbc:script location="classpath:db/postgres/initPostgreSQL.sql"/>
        <jdbc:script location="classpath:db/postgres/populatePostgreSQL.sql"/>
-->
        <jdbc:script location="classpath:db/hsqldb/initHSQLDB.sql"/>
        <jdbc:script location="classpath:db/hsqldb/populateHSQLDB.sql"/>

    </jdbc:initialize-database>

    <!--populate db before every tests by personal class-->
    <bean class="ua.teachme.util.PopulatorDB">
        <constructor-arg name="scriptLocation" value="classpath:db/hsqldb/populateHSQLDB.sql" />
    </bean>

    <!--
        core data source driver manager
        one query = one connect
        without pooling
    -->

    <tx:annotation-driven/>

    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
          p:dataSource-ref="jdbcDataSource"
          p:packagesToScan="ua.teachme.**.model">
<!--
          p:persistenceUnitName="persistenceUnit">

        <property name="jpaPropertyMap">
            <map>
                <entry key="#{T(org.hibernate.cfg.AvailableSettings).FORMAT_SQL}" value="${hibernate.format_sql}"/>
                <entry key="#{T(org.hibernate.cfg.AvailableSettings).USE_SQL_COMMENTS}" value="${hibernate.use_sql_comments}"/>
                <entry key="#{T(org.hibernate.cfg.AvailableSettings).HBM2DDL_AUTO}" value="${hibernate.hbm2ddl.auto}"/>
            </map>
        </property>
-->

        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"
                  p:showSql="${jpa.show_sql}">
            </bean>
        </property>

    </bean>

    <!-- Transaction manager for a single JPA EntityManagerFactory (alternative to JTA) -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
          p:entityManagerFactory-ref="entityManagerFactory"/>

    <beans profile="HSQLDB">
        <context:property-placeholder location="classpath:db/hsqldb/HSQLDB.properties"/>
        <bean id="jdbcDataSource"
              class="org.springframework.jdbc.datasource.DriverManagerDataSource">
            <property name="driverClassName" value="${db.driver}"/>
            <property name="url" value="${db.url}"/>
            <property name="username" value="${db.username}"/>
            <property name="password" value="${db.password}"/>
        </bean>
    </beans>
<!--
    <bean id="jdbcTemplate"
          class="org.springframework.jdbc.core.JdbcTemplate">
        <constructor-arg ref="jdbcDataSource"/>
    </bean>


    <bean id="namedJdbcTemplate"
          class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
        <constructor-arg ref="jdbcDataSource"/>
    </bean>
-->
</beans>